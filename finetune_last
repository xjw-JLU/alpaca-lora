import os
import sys
from typing import List

import fire
import torch

import transformers
from datasets import load_dataset
import evaluate

"""
Unused imports:
import torch.nn as nn
import bitsandbytes as bnb
"""

# from peft import (
#     LoraConfig,
#     get_peft_model,
#     get_peft_model_state_dict,
#     prepare_model_for_int8_training,
#     set_peft_model_state_dict,
# )
# from transformers import LlamaForCausalLM, LlamaTokenizer
from transformers import GPT2LMHeadModel, GPT2Tokenizer,GPT2Config 

from utils.prompter import Prompter

from datasets import load_dataset,load_from_disk
from nltk.tokenize import sent_tokenize
import nltk
nltk.download("punkt")
import numpy as np

class PrintGradientTrainer(transformers.Trainer):
 
    def training_step(self, model, inputs):
        model.train()
        inputs = self._prepare_inputs(inputs)
 
        loss = self.compute_loss(model, inputs)
 
        loss.backward()
        
        # ------------------------new added codes.--------------------------
        for name, param in model.named_parameters():
            if param.requires_grad:
                if param.grad is not None:
                    print("{}, gradient: {}".format(name, param.grad.mean()))
                else:
                    print("{} has not gradient".format(name))
        # ------------------------new added codes.--------------------------
        return loss.detach()

   
class CustomTrainer(transformers.Seq2SeqTrainer):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.trained_data = []
    def compute_loss(self, model, inputs, return_outputs=False):
    # 原始的损失计算逻辑
        
        
        if self.label_smoother is not None and "labels" in inputs:
            labels = inputs.pop("labels")
        else:
            labels = None
        outputs = model(**inputs)
        # Save past state if it exists
        # TODO: this needs to be fixed and made cleaner later.
        if self.args.past_index >= 0:
            self._past = outputs[self.args.past_index]

        if labels is not None:
            # if unwrap_model(model)._get_name() in MODEL_FOR_CAUSAL_LM_MAPPING_NAMES.values():
            loss = self.label_smoother(outputs, labels, shift_labels=True)
            # else:
                # loss = self.label_smoother(outputs, labels)
        else:
            if isinstance(outputs, dict) and "loss" not in outputs:
                raise ValueError(
                    "The model did not return a loss from the inputs, only the following keys: "
                    f"{','.join(outputs.keys())}. For reference, the inputs it received are {','.join(inputs.keys())}."
                )
            # We don't use .loss here since the model may return tuples instead of ModelOutput.
            loss = outputs["loss"] if isinstance(outputs, dict) else outputs[0]

        

        return (loss, outputs) if return_outputs else loss


    def training_step(self, model, inputs) -> torch.Tensor:
        
        model.train()
        inputs = self._prepare_inputs(inputs)

        # if is_sagemaker_mp_enabled():
        #     loss_mb = smp_forward_backward(model, inputs, self.args.gradient_accumulation_steps)
        #     return loss_mb.reduce_mean().detach().to(self.args.device)

        with self.compute_loss_context_manager():
            loss = self.compute_loss(model, inputs)

        if self.args.n_gpu > 1:
            loss = loss.mean()  # mean() to average on multi-gpu parallel training

        if self.do_grad_scaling:
            self.scaler.scale(loss).backward()
        elif self.use_apex:
            # with amp.scale_loss(loss, self.optimizer) as scaled_loss:
            #     scaled_loss.backward()
            pass
        else:
            self.accelerator.backward(loss)

        input_data = self.tokenizer.batch_decode(inputs["input_ids"], skip_special_tokens=True)
        loss_value = loss.item()
        
        with open('train_data_with_loss.json', 'a') as f:
            for input_text in input_data:
                record = {"data": input_text, "loss": loss_value}
                f.write(json.dumps(record) + '\n')

        self.trained_data.append(input_data)
        return loss.detach() / self.args.gradient_accumulation_steps


    def evaluate(
        self,
        eval_dataset,
        ignore_keys,
        metric_key_prefix,
        **gen_kwargs,
    ):

        gen_kwargs = gen_kwargs.copy()
        if gen_kwargs.get("max_length") is None and gen_kwargs.get("max_new_tokens") is None:
            gen_kwargs["max_length"] = self.args.generation_max_length
        gen_kwargs["num_beams"] = (
            gen_kwargs["num_beams"] if gen_kwargs.get("num_beams") is not None else self.args.generation_num_beams
        )
        self._gen_kwargs = gen_kwargs

        output = super().evaluate(eval_dataset, ignore_keys=ignore_keys, metric_key_prefix=metric_key_prefix)
        metrcis = {}
        metrcis["eval_loss"] = output["eval_loss"]
        metrcis["eval_rouge1"] = output["eval_rouge1"]
        metrcis["eval_rouge2"] = output["eval_rouge2"]
        metrcis["eval_rougeL"] = output["eval_rougeL"]
        metrcis["eval_rougeLsum"] = output["eval_rougeLsum"]

        with open('val_data_with_metric.json', 'a') as f:
            for batch_data in self.trained_data:
                input_data = self.tokenizer.batch_decode(batch_data["input_ids"], skip_special_tokens=True)
    
                record = {"data": input_data, "metrics": metrcis}
                f.write(json.dumps(record) + '\n')

        return output
 
  
def train(
    # model/data params
    base_model: str = "/root/paddlejob/code/module/gpt2",  # the only required argument
    data_path: str = "/root/paddlejob/code/alpaca-lora/alpaca_data.json",
    output_dir: str = "./gpt2",
    # training hyperparams
    # batch_size: int = 128,
    batch_size: int = 32,
    micro_batch_size: int = 4,
    num_epochs: int = 3,
    learning_rate: float = 3e-4,
    cutoff_len: int = 1024,
    val_set_size: int = 2000,
    # lora hyperparams
    lora_r: int = 8,
    lora_alpha: int = 16,
    lora_dropout: float = 0.05,
    lora_target_modules: List[str] = [
        "q_proj",
        "v_proj",
    ],
    # llm hyperparams
    train_on_inputs: bool = False,  # if False, masks out inputs in loss
    add_eos_token: bool = True,
    group_by_length: bool = False,  # faster, but produces an odd training loss curve
    # wandb params
    wandb_project: str = "",
    wandb_run_name: str = "",
    wandb_watch: str = "",  # options: false | gradients | all
    wandb_log_model: str = "",  # options: false | true
    resume_from_checkpoint: str = None,  # either training checkpoint or final adapter
    prompt_template_name: str = "alpaca",  # The prompt template to use, will default to alpaca.
):
    if int(os.environ.get("LOCAL_RANK", 0)) == 0:
        print(
            f"Training Alpaca-LoRA model with params:\n"
            f"base_model: {base_model}\n"
        )
    assert (
        base_model
    ), "Please specify a --base_model, e.g. --base_model='huggyllama/llama-7b'"
    gradient_accumulation_steps = batch_size // micro_batch_size

    prompter = Prompter(prompt_template_name)

    device_map = "auto"
    world_size = int(os.environ.get("WORLD_SIZE", 1))
    ddp = world_size != 1
    if ddp:
        device_map = {"": int(os.environ.get("LOCAL_RANK") or 0)}
        gradient_accumulation_steps = gradient_accumulation_steps // world_size

    # Check if parameter passed or if set within environ
    use_wandb = len(wandb_project) > 0 or (
        "WANDB_PROJECT" in os.environ and len(os.environ["WANDB_PROJECT"]) > 0
    )
    # Only overwrite environ if wandb param passed
    if len(wandb_project) > 0:
        os.environ["WANDB_PROJECT"] = wandb_project
    if len(wandb_watch) > 0:
        os.environ["WANDB_WATCH"] = wandb_watch
    if len(wandb_log_model) > 0:
        os.environ["WANDB_LOG_MODEL"] = wandb_log_model


    model = GPT2LMHeadModel.from_pretrained('/root/paddlejob/code/module/gpt2')

    # tokenizer = LlamaTokenizer.from_pretrained(base_model)
    tokenizer = GPT2Tokenizer.from_pretrained('/root/paddlejob/code/module/gpt2')
    # tokenizer = LlamaTokenizer.from_pretrained(base_model)

    # tokenizer.pad_token_id = (
    #     0  # unk. we want this to be different from the eos token
    # )
    tokenizer.padding_side = "left"  # Allow batched inference

  

    # special_tokens = {'pad_token':'<|pad|>'}
    # tokenizer.add_special_tokens(special_tokens)
    # print(tokenizer.pad_token_id)
    # model.resize_token_embeddings(len(tokenizer))
    new_pad_token = '<pad>'
    assert new_pad_token not in tokenizer.get_vocab()

    # 为分词器添加新的 pad_token，并设置 pad_token_id
    tokenizer.add_special_tokens({'pad_token': new_pad_token})
    pad_token_id = tokenizer.convert_tokens_to_ids(new_pad_token)
    tokenizer.pad_token_id = pad_token_id
    # 更新模型的词汇表大小
    model.resize_token_embeddings(len(tokenizer))
    # 确保模型知道新的 pad_token_id
    model.config.pad_token_id = pad_token_id

    def tokenize(prompt, add_eos_token=True):
        # there's probably a way to do this with the tokenizer settings
        # but again, gotta move fast
        result = tokenizer(
            prompt,
            truncation=True,
            max_length=cutoff_len,
            padding="max_length",
            return_tensors=None,
        )
        if (
            result["input_ids"][-1] != tokenizer.eos_token_id
            and len(result["input_ids"]) < cutoff_len
            and add_eos_token
        ):
            result["input_ids"].append(tokenizer.eos_token_id)
            result["attention_mask"].append(1)

        result["labels"] = result["input_ids"].copy()

        return result

    def tokenize_gpt2(prompt, add_eos_token=True):
        # there's probably a way to do this with the tokenizer settings
        # but again, gotta move fast
        sepStr = " TL;DR "
        text = prompt["article"] + sepStr + prompt["highlights"]
        # result = tokenizer(
        #     text,
        #     truncation=True,
        #     max_length=cutoff_len,
        #     padding=False,
        #     return_tensors=None,
        # )
        result = tokenize(text, add_eos_token=add_eos_token)
    
        if not train_on_inputs:
            user_prompt = prompt["article"] + sepStr
            tokenized_user_prompt = tokenize(user_prompt, add_eos_token=add_eos_token)
            user_prompt_len = len(tokenized_user_prompt["input_ids"])

            if add_eos_token:
                user_prompt_len -= 1
            result["labels"] = [
                -100
            ] * user_prompt_len + result["labels"][
                user_prompt_len:
            ]  # could be sped up, probably

        return result

    rouge_score = evaluate.load("evaluate/metrics/rouge/rouge.py")



    def compute_metrics(eval_pred):
        predictions, labels = eval_pred
        decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
        labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)
        result = rouge_score.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)
        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in predictions]
        result["gen_len"] = np.mean(prediction_lens)
        return {k: round(v, 4) for k, v in result.items()}

    def compute_metrics2(eval_pred):
        predictions, labels = eval_pred
        # Decode generated summaries into text
        decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
        # Replace -100 in the labels as we can't decode them
        labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
        # Decode reference summaries into text
        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)
        # ROUGE expects a newline after each sentence
        decoded_preds = ["\n".join(sent_tokenize(pred.strip())) for pred in decoded_preds]
        decoded_labels = ["\n".join(sent_tokenize(label.strip())) for label in decoded_labels]
        # Compute ROUGE scores
        result = rouge_score.compute(
            predictions=decoded_preds, references=decoded_labels, use_stemmer=True
        )
        # Extract the median scores
        result = {key: value.mid.fmeasure * 100 for key, value in result.items()}
        return {k: round(v, 4) for k, v in result.items()}



    def generate_and_tokenize_prompt(data_point):
        full_prompt = prompter.generate_prompt(
            data_point["instruction"],
            data_point["input"],
            data_point["output"],
        )
        tokenized_full_prompt = tokenize(full_prompt)
        if not train_on_inputs:
            user_prompt = prompter.generate_prompt(
                data_point["instruction"], data_point["input"]
            )
            tokenized_user_prompt = tokenize(
                user_prompt, add_eos_token=add_eos_token
            )
            user_prompt_len = len(tokenized_user_prompt["input_ids"])

            if add_eos_token:
                user_prompt_len -= 1

            tokenized_full_prompt["labels"] = [
                -100
            ] * user_prompt_len + tokenized_full_prompt["labels"][
                user_prompt_len:
            ]  # could be sped up, probably
        return tokenized_full_prompt


    # if data_path.endswith(".json") or data_path.endswith(".jsonl"):
    #     data = load_dataset("json", data_files=data_path)
    # else:
    #     data = load_dataset(data_path)

    data = load_from_disk('/root/paddlejob/code/data/cnn_dailymail')
    # data = load_dataset('/root/paddlejob/code/data/','3.0.0')

    
    print("data_begin_test:")
    print(data)
    print("data_end:")
    if resume_from_checkpoint:
        # Check the available weights and load them
        checkpoint_name = os.path.join(
            resume_from_checkpoint, "pytorch_model.bin"
        )  # Full checkpoint
        if not os.path.exists(checkpoint_name):
            checkpoint_name = os.path.join(
                resume_from_checkpoint, "adapter_model.bin"
            )  # only LoRA model - LoRA config above has to fit
            resume_from_checkpoint = (
                False  # So the trainer won't try loading its state
            )
        # The two files above have a different name depending on how they were saved, but are actually the same.
        if os.path.exists(checkpoint_name):
            print(f"Restarting from {checkpoint_name}")
            adapters_weights = torch.load(checkpoint_name)
            # set_peft_model_state_dict(model, adapters_weights)
        else:
            print(f"Checkpoint {checkpoint_name} not found")

    # model.print_trainable_parameters()  # Be more transparent about the % of trainable params.

    # if val_set_size > 0:
    #     # train_val = data["train"].train_test_split(
    #     #     test_size=val_set_size, shuffle=True, seed=42
    #     # )
    #     # train_data = (
    #     #     train_val["train"].shuffle().map(generate_and_tokenize_prompt)
    #     # )
    #     # val_data = (
    #     #     train_val["test"].shuffle().map(generate_and_tokenize_prompt)
    #     # )
    #     train_data = data["train"].shuffle().map(tokenize_gpt2)
    #     val_data = data["test"].shuffle().map(tokenize_gpt2)
    # else:
    #     train_data = data["train"].shuffle().map(tokenize_gpt2)
    #     val_data = None

    train_data = data["train"].shuffle().select(range(500)).map(tokenize_gpt2)
    val_data = data["validation"].shuffle().select(range(40)).map(tokenize_gpt2)


    # train_data = load_dataset("json", data_files="/root/paddlejob/code/data/train.json")
    # train_data = train_data["train"].shuffle().map(tokenize_gpt2, load_from_cache_file=True, cache_file_name="/root/paddlejob/code/data/train.json.cache")

    # test_data = load_dataset("json", data_files="/root/paddlejob/code/data/test.json")
    # test_data = test_data["train"].shuffle().map(tokenize_gpt2, load_from_cache_file=True, cache_file_name="/root/paddlejob/code/data/test.json.cache")
    # val_data = load_dataset("json", data_files="/root/paddlejob/code/data/validation.json")
    # val_data = val_data["train"].shuffle().map(tokenize_gpt2, load_from_cache_file=True, cache_file_name="/root/paddlejob/code/data/validation.json.cache")


    # train_data = train_data["train"].shuffle(seed=42).select(range(1000))
    # val_data = val_data["test"].shuffle(seed=42).select(range(1000))       

    print("train_data:\n",train_data)
    
    print("val_data:\n",val_data)
    # if not ddp and torch.cuda.device_count() > 1:
    #     # keeps Trainer from trying its own DataParallelism when more than 1 gpu is available
    #     print("model.is_parallelizable = True")
    #     print("model.model_parallel = True")
    #     model.is_parallelizable = True
    #     model.model_parallel = True

    trainer = transformers.Seq2SeqTrainer(
        model=model,
        train_dataset=train_data,
        eval_dataset=val_data,
        args=transformers.Seq2SeqTrainingArguments(
            # no_cuda=True,
            per_device_train_batch_size=micro_batch_size,
            gradient_accumulation_steps=gradient_accumulation_steps,
            warmup_steps=100,
            num_train_epochs=num_epochs,
            learning_rate=learning_rate,
            # fp16=True,
            logging_steps=10,
            optim="adamw_torch",
            evaluation_strategy="steps" if val_set_size > 0 else "no",
            save_strategy="steps",
            eval_steps=5 if val_set_size > 0 else None,
            save_steps=200,
            output_dir=output_dir,
            save_total_limit=3,
            load_best_model_at_end=True if val_set_size > 0 else False,
            ddp_find_unused_parameters=False if ddp else None,
            group_by_length=group_by_length,
            report_to="wandb" if use_wandb else None,
            run_name=wandb_run_name if use_wandb else None,
            predict_with_generate = True,
        ),
        data_collator=transformers.DataCollatorForSeq2Seq(
            tokenizer, return_tensors="pt", padding="max_length", max_length=cutoff_len,
        ),
        compute_metrics=compute_metrics,
    )
    model.config.use_cache = False

    # old_state_dict = model.state_dict
    # model.state_dict = (
    #     lambda self, *_, **__: get_peft_model_state_dict(
    #         self, old_state_dict()
    #     )
    # ).__get__(model, type(model))

    if torch.__version__ >= "2" and sys.platform != "win32":
        model = torch.compile(model)

    trainer.train(resume_from_checkpoint=resume_from_checkpoint)

    model.save_pretrained(output_dir)

    print(
        "\n If there's a warning about missing keys above, please disregard :)"
    )



if __name__ == "__main__":
    # torch.cuda.empty_cache()
    torch.cuda.empty_cache()
    fire.Fire(train)
    # train()
